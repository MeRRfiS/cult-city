//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Project/Input Actions/StorageInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @StorageInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StorageInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StorageInputAction"",
    ""maps"": [
        {
            ""name"": ""Storage"",
            ""id"": ""5910ecb9-45a7-412f-b4dd-ca6712449b6c"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""7e169262-ccda-43e6-bbdb-c4b58bd20f15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""93621cd3-60d8-43f3-b50a-0f6d5f6b4d10"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Storage
        m_Storage = asset.FindActionMap("Storage", throwIfNotFound: true);
        m_Storage_Close = m_Storage.FindAction("Close", throwIfNotFound: true);
    }

    ~@StorageInputAction()
    {
        Debug.Assert(!m_Storage.enabled, "This will cause a leak and performance issues, StorageInputAction.Storage.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Storage
    private readonly InputActionMap m_Storage;
    private List<IStorageActions> m_StorageActionsCallbackInterfaces = new List<IStorageActions>();
    private readonly InputAction m_Storage_Close;
    public struct StorageActions
    {
        private @StorageInputAction m_Wrapper;
        public StorageActions(@StorageInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_Storage_Close;
        public InputActionMap Get() { return m_Wrapper.m_Storage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StorageActions set) { return set.Get(); }
        public void AddCallbacks(IStorageActions instance)
        {
            if (instance == null || m_Wrapper.m_StorageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StorageActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(IStorageActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(IStorageActions instance)
        {
            if (m_Wrapper.m_StorageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStorageActions instance)
        {
            foreach (var item in m_Wrapper.m_StorageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StorageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StorageActions @Storage => new StorageActions(this);
    public interface IStorageActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
}
